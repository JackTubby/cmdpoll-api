// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(cuid())
  email          String           @unique
  password       String           @default("password")
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Poll           RunningPoll[]
  HistoricalPoll HistoricalPoll[]
  Team           Team[]           @relation("TeamUsers")
}

model RunningPoll {
  id        String   @id @default(cuid())
  title     String
  duration  Int
  roomId    String
  isPrivate Boolean  @default(false)
  createdAt DateTime @default(now())

  categories    PollCategory[]
  votes         PollVote[]
  usersVotedIds String[]       @default([])

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model PollCategory {
  id        String @id @default(cuid())
  name      String
  voteCount Int    @default(0)

  poll     RunningPoll @relation(fields: [pollId], references: [id])
  pollId   String
  PollVote PollVote[]
}

model PollVote {
  id            String       @id @default(cuid())
  userId        String // Could be anonymous or actual user
  category      PollCategory @relation(fields: [categoryId], references: [id])
  categoryId    String
  createdAt     DateTime     @default(now())
  RunningPoll   RunningPoll? @relation(fields: [runningPollId], references: [id])
  runningPollId String?
}

model HistoricalPoll {
  id            String   @id @default(cuid())
  title         String
  categories    Json     @default("{}")
  duration      Int
  roomId        String
  isPrivate     Boolean  @default(false)
  createdAt     DateTime @default(now())
  usersVotedIds String[] @default([])

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Team {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[] @relation("TeamUsers")
}
